#include "params.h"/*simple reduce-scan-scan scheme, for CPUs and MICs*/kernel void reduce_single(        global int *d_in,        global int *reduction,          //reduction value for each WG        uint len_per_wg,        const uint length_total){    const int group_id = get_group_id(0);    const uint start =  len_per_wg*group_id;    uint end = (group_id+1)* len_per_wg;    if (end > length_total)  end = length_total;    int acc = 0;    for(int i = start; i < end; i++) {        acc += d_in[i];    }    reduction[group_id] = acc;}kernel void scan_no_offset_single(        global int *d_inout,             //input data        uint length_total){    int acc = d_inout[0];    d_inout[0] = 0;    for(int i = 1; i < length_total; i++) {        int temp = d_inout[i];        d_inout[i] = acc;        acc += temp;    }}kernel void scan_with_offset_single(        global int *d_in,             //input data        global int *d_out,             //output data        global const int *offsets_global,   //offset for each wg        uint len_per_wg,                    //elements processed by each WG        uint length_total){    const int group_id = get_group_id(0);    const uint start =  len_per_wg*group_id;    uint end = (group_id+1)* len_per_wg;    if (end > length_total)  end = length_total;    int offset = offsets_global[group_id];    if (start >= length_total)   return;    d_out[start] = offset;    for(int i = start+1; i < end; i++) {        d_out[i] = d_out[i-1] + d_in[i-1];    }}