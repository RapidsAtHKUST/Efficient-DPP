//calculate the smallest power of two larger than inputint ceilPowerOfTwo(uint input) {    int k = 1;    while (k < input) k<<=1;    return k;}//each block can proceed BLOCKSIZE*2 (currently 1024) numberskernel void prefixScan(global int* records,       //size: number of elements                       uint length,                       uint isExclusive,                       local int* temp){    int localId = get_local_id(0);    int globalId = get_global_id(0);    int groupId = get_group_id(0);        temp[2*localId] = 0;                            //initialize to zero for 0 padding    temp[2*localId + 1] = 0;    barrier(CLK_LOCAL_MEM_FENCE);        int offset = 1;                                 //offset: the distance of the two added numbers    int paddedLength = ceilPowerOfTwo(length);      //padding        //memory copy    if (2*localId<length)    temp[2*localId] = records[2*localId];    if (2*localId+1<length)  temp[2*localId+1] = records[2*localId+1];    barrier(CLK_LOCAL_MEM_FENCE);        //reduce    for(int d = paddedLength >> 1; d > 0; d >>=1) {        barrier(CLK_LOCAL_MEM_FENCE);        if (localId < d) {            int ai = offset * ( 2 * localId + 1 ) - 1;            int bi = offset * ( 2 * localId + 2 ) - 1;            temp[bi] += temp[ai];        }        offset <<= 1;    }    barrier(CLK_LOCAL_MEM_FENCE);        if (localId == 0)    {        temp[paddedLength-1] = 0;    }    barrier(CLK_LOCAL_MEM_FENCE);        //sweep down    for(int d = 1; d < paddedLength; d <<= 1) {        offset >>= 1;        if (localId < d) {            int ai = offset * (2 * localId + 1) -1;            int bi = offset * (2 * localId + 2) -1;                        int t = temp[ai];            temp[ai] = temp[bi];            temp[bi] += t;        }        barrier(CLK_LOCAL_MEM_FENCE);    }        if (isExclusive == 1) {     //exclusive        //memory output        if (2*localId<length)    records[2*localId] = temp[2*localId];        if (2*localId+1<length)  records[2*localId+1] = temp[2*localId+1];    }    else {                      //inclusive        //memory output        if (2*localId<length)    records[2*localId] += temp[2*localId];        if (2*localId+1<length)  records[2*localId+1] += temp[2*localId+1];    }}//scan large array: parittion into blocks, each block proceeds 1024 numbers.kernel void scanLargeArray(global int* records,           //size: number of elements                           uint length,                           uint isExclusive,                           local int* temp,             //local memory used                           uint tempSize,                           global uint* blockSum)       //store the sums of each block{    int localId = get_local_id(0);    int globalId = get_global_id(0);    int groupId = get_group_id(0);        temp[2*localId] = 0;                            //initialize to zero for 0 padding    temp[2*localId + 1] = 0;    barrier(CLK_LOCAL_MEM_FENCE);        int offset = 1;                                 //offset: the distance of the two added numbers        //memory copy    if (2*globalId<length)    temp[2*localId] = records[2*globalId];    if (2*globalId+1<length)  temp[2*localId+1] = records[2*globalId+1];        //reduce    for(int d = tempSize >> 1; d > 0; d >>=1) {        barrier(CLK_LOCAL_MEM_FENCE);        if (localId < d) {            int ai = offset * ( 2 * localId + 1 ) - 1;            int bi = offset * ( 2 * localId + 2 ) - 1;            temp[bi] += temp[ai];        }        offset <<= 1;    }        if (localId == 0)   {        blockSum[groupId] = temp[tempSize-1];              //write the sum        temp[tempSize-1] = 0;    }    barrier(CLK_LOCAL_MEM_FENCE);        //sweep down    for(int d = 1; d < tempSize; d <<= 1) {        offset >>= 1;        barrier(CLK_LOCAL_MEM_FENCE);        if (localId < d) {            int ai = offset * (2 * localId + 1) -1;            int bi = offset * (2 * localId + 2) -1;                        int t = temp[ai];            temp[ai] = temp[bi];            temp[bi] += t;        }    }    barrier(CLK_LOCAL_MEM_FENCE);        if (isExclusive == 1) {        //memory output        if (2*globalId<length)    records[2*globalId] = temp[2*localId];        if (2*globalId+1<length)  records[2*globalId+1] = temp[2*localId+1];    }    else {        //memory output        if (2*globalId<length)    records[2*globalId] += temp[2*localId];        if (2*globalId+1<length)  records[2*globalId+1] += temp[2*localId+1];    }}kernel void addBlock(global int* records,                     uint length,                     global int* blockSum,                     local int* temp){    int localId = get_local_id(0);    int globalId = get_global_id(0);    int groupId = get_group_id(0);        temp[2*localId] = 0;    temp[2*localId+1] = 0;    barrier(CLK_LOCAL_MEM_FENCE);        //memory copy    if (2*globalId<length)    temp[2*localId] = records[2*globalId];    if (2*globalId+1<length)  temp[2*localId+1] = records[2*globalId+1];    barrier(CLK_LOCAL_MEM_FENCE);        int thisBlockSum = 0;        if (groupId > 0) {        thisBlockSum = blockSum[groupId-1];        if (2*globalId < length)        temp[2*localId] += thisBlockSum;        if (2*globalId + 1 < length)    temp[2*localId + 1] += thisBlockSum;    }    barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);        if (2*globalId < length)        records[2*globalId] = temp[2*localId];    if (2*globalId + 1 < length)    records[2*globalId + 1] = temp[2*localId+1];}